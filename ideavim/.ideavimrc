" IDEAVim Specific settings
set visualbell
set ideajoin
set idearefactormode=keep
" :w writes all files
set ideawrite=all
set showmode
set showcmd
nnoremap [[ :action MethodUp<CR>zz
nnoremap ]] :action MethodDown<CR>zz

" autocmd 
" augroup vimrc-incsearch-highlight-undo
"     autocmd!
"     autocmd CmdlineEnter /,\? :set hlsearch
"     autocmd CmdlineLeave /,\? :set nohlsearch
" augroup END

" Disable automatic comment insertion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o



" options
let mapleader = " "

set relativenumber
set number
set clipboard+=unnamedplus
set clipboard+=ideaput
set hlsearch
set incsearch
set scroll=20 " Scroll X lines using Ctrl-d/Ctrl-u
set scrolloff=5 " Keep X lines above/below cursor when scrolling
set iskeyword+=- " Treat dash separated words as a word text object



" keymaps
" allow single line travel when lines visually wrap
" nnoremap j gj
" nnoremap k gk
" move hightlighted text up/down in different modes
nnoremap <space>j :m .+1<CR>==
nnoremap <space>k :m .-2<CR>==
inoremap <c-j> <esc>:m .+1<CR>==gi
inoremap <c-k> <esc>:m .-2<CR>==gi
xmap J <Action>(MoveLineDown)
xmap K <Action>(MoveLineUp)

" toggle ignorecase
nnoremap <F2> :set ignorecase! ignorecase?<cr>
nnoremap <c-c> <esc>

" exit insert mode whenever you type 'jk' or 'kj'
inoremap kj <esc>
inoremap jk <esc>

" delete without yanking
nnoremap <space>d "_d
vnoremap <space>d "_d
nnoremap <space>D "_D
nnoremap <space>C "_C
nnoremap <space>c "_c
nnoremap <space>x "_x

" replace currently selected text with default register without yanking
vnoremap p "_dP
" ???
" nnoremap <space>x "_dx

" wtf?????????????????????????????????????????????????????????????????????
nnoremap Y y$
nnoremap n nzzzv
nnoremap N Nzzzv
" ???
nnoremap <space>J mzJ`z
" break undo sequence using punctuation marks
" TODO fix bug
" inoremap , ,<c-g>u
" inoremap . .<c-g>u
" inoremap ! !<c-g>u
" inoremap ? ?<c-g>u

" make vim behave
" D duplicates highlighted below
vnoremap D y'>p
" tab while code selected
vnoremap < <gv
vnoremap > >gv

" IDEA SPECIFIC settings (refactored from nvim)
" splits
nmap <c-h> <Action>(PrevSplitter)
" map('n', '<c-j>', '<c-w>j')
" map('n', '<c-k>', '<c-w>k')
nmap <c-l> <Action>(NextSplitter)

" navigate buffer
nmap <tab> <Action>(NextTab)
" nmap <tab> <Action>(Forward)
nmap <s-tab> <Action>(PreviousTab)
" nmap <s-tab> <Action>(Back)

" nmap :bd <Action>(CloseContent)
" nmap :term <Action>(ActivateTerminalToolWindow)



" diagnostics
nmap <space>e <Action>(ShowErrorDescription)
nmap [d <Action>(GotoPreviousError)
nmap ]d <Action>(GotoNextError)
" vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

" Telescope | ff -> find file | fg -> find grep | fb -> find buffer
" Telescope | dl -> diagnostics list | fa -> find all
nmap <space>ff <Action>(GotoFile)
" SearchEverywhere
nmap <space>fg <Action>(FindInPath)
nmap <space>fb <Action>(RecentFiles)
" map('n', '<space>fh', "<cmd>lua require('telescope.builtin').help_tags()<cr>", opts)
nmap <space>fd <Action>(ActivateProblemsViewToolWindow)
nmap <space>fa <Action>(FindUsages)

" " lsp.lua
" vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoDeclaration)
" vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
nmap gt <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
" vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
" vim.api.nvim_buf_set_keymap(bufnr, 'n', '<c-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
nmap <space>R <Action>(RenameElement)
nmap <space>ca <Action>(ShowIntentionActions)
nmap <space>fm <Action>(ShowReformatFileDialog)
vmap <space>fm <Action>(ShowReformatFileDialog)
nmap <F1> <Action>(ShowReformatFileDialog)

nnoremap <space>r :action Refactorings.QuickListPopupAction<CR>
nmap <space>tc :action RunCoverage<CR>
nmap <space>tC gg:action MethodDown<CR>zz:action RunCoverage<CR>
nmap <space>fc :action HideAllWindows<CR>
nmap <space>gb :action Annotate<CR>


" plugins
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 50 " time in milliseconds
let g:highlightedyank_highlight_color = "rgba(255, 195, 0, 100)"
Plug 'easymotion/vim-easymotion'
Plug 'dbakker/vim-paragraph-motion'

